#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Jamsaz.Launcher.BusinessObject.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="JamsazERPLite")]
	public partial class JamsazERPLiteDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRoleMember(RoleMember instance);
    partial void UpdateRoleMember(RoleMember instance);
    partial void DeleteRoleMember(RoleMember instance);
    partial void InsertRoleAction(RoleAction instance);
    partial void UpdateRoleAction(RoleAction instance);
    partial void DeleteRoleAction(RoleAction instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertApplicationForm(ApplicationForm instance);
    partial void UpdateApplicationForm(ApplicationForm instance);
    partial void DeleteApplicationForm(ApplicationForm instance);
    partial void InsertAction(Action instance);
    partial void UpdateAction(Action instance);
    partial void DeleteAction(Action instance);
    partial void InsertActionControlPropertyValue(ActionControlPropertyValue instance);
    partial void UpdateActionControlPropertyValue(ActionControlPropertyValue instance);
    partial void DeleteActionControlPropertyValue(ActionControlPropertyValue instance);
    partial void InsertFiscalYear(FiscalYear instance);
    partial void UpdateFiscalYear(FiscalYear instance);
    partial void DeleteFiscalYear(FiscalYear instance);
    partial void InsertBusinessApplication(BusinessApplication instance);
    partial void UpdateBusinessApplication(BusinessApplication instance);
    partial void DeleteBusinessApplication(BusinessApplication instance);
    #endregion
		
		public JamsazERPLiteDataContext() : 
				base(global::Jamsaz.Launcher.BusinessObject.Properties.Settings.Default.JamsazERPLiteConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public JamsazERPLiteDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JamsazERPLiteDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JamsazERPLiteDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JamsazERPLiteDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<RoleMember> RoleMembers
		{
			get
			{
				return this.GetTable<RoleMember>();
			}
		}
		
		public System.Data.Linq.Table<RoleAction> RoleActions
		{
			get
			{
				return this.GetTable<RoleAction>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationForm> ApplicationForms
		{
			get
			{
				return this.GetTable<ApplicationForm>();
			}
		}
		
		public System.Data.Linq.Table<Action> Actions
		{
			get
			{
				return this.GetTable<Action>();
			}
		}
		
		public System.Data.Linq.Table<ActionControlPropertyValue> ActionControlPropertyValues
		{
			get
			{
				return this.GetTable<ActionControlPropertyValue>();
			}
		}
		
		public System.Data.Linq.Table<FiscalYear> FiscalYears
		{
			get
			{
				return this.GetTable<FiscalYear>();
			}
		}
		
		public System.Data.Linq.Table<BusinessApplication> BusinessApplications
		{
			get
			{
				return this.GetTable<BusinessApplication>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="uac.GetAllApproachabilityApplications")]
		public ISingleResult<GetAllApproachabilityApplicationsResult> GetAllApproachabilityApplications([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> userGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupsCUID", DbType="NVarChar(MAX)")] string groupsCUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActiveDirectoryUser", DbType="Int")] System.Nullable<int> isActiveDirectoryUser, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonnelID", DbType="Int")] System.Nullable<int> personnelID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userGUID, groupsCUID, isActiveDirectoryUser, personnelID);
			return ((ISingleResult<GetAllApproachabilityApplicationsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="uac.SelectBussinessApplications")]
		public ISingleResult<BusinessApplication> SelectBussinessApplications([global::System.Data.Linq.Mapping.ParameterAttribute(Name="IDs", DbType="NVarChar(1024)")] string iDs)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iDs);
			return ((ISingleResult<BusinessApplication>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="uac.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<int> _DepartmentID;
		
		private System.Nullable<int> _PersonnelID;
		
		private string _UserName;
		
		private System.Data.Linq.Binary _Password;
		
		private System.DateTime _ExpirationDate;
		
		private bool _IsActive;
		
		private System.Nullable<int> _SupplierID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDepartmentIDChanging(System.Nullable<int> value);
    partial void OnDepartmentIDChanged();
    partial void OnPersonnelIDChanging(System.Nullable<int> value);
    partial void OnPersonnelIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(System.Data.Linq.Binary value);
    partial void OnPasswordChanged();
    partial void OnExpirationDateChanging(System.DateTime value);
    partial void OnExpirationDateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnSupplierIDChanging(System.Nullable<int> value);
    partial void OnSupplierIDChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(128)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(128)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int")]
		public System.Nullable<int> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelID", DbType="Int")]
		public System.Nullable<int> PersonnelID
		{
			get
			{
				return this._PersonnelID;
			}
			set
			{
				if ((this._PersonnelID != value))
				{
					this.OnPersonnelIDChanging(value);
					this.SendPropertyChanging();
					this._PersonnelID = value;
					this.SendPropertyChanged("PersonnelID");
					this.OnPersonnelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarBinary(1024) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int")]
		public System.Nullable<int> SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="uac.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _BusinessApplicationID;
		
		private EntitySet<RoleMember> _RoleMembers;
		
		private EntitySet<RoleAction> _RoleActions;
		
		private EntityRef<BusinessApplication> _BusinessApplication;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBusinessApplicationIDChanging(int value);
    partial void OnBusinessApplicationIDChanged();
    #endregion
		
		public Role()
		{
			this._RoleMembers = new EntitySet<RoleMember>(new Action<RoleMember>(this.attach_RoleMembers), new Action<RoleMember>(this.detach_RoleMembers));
			this._RoleActions = new EntitySet<RoleAction>(new Action<RoleAction>(this.attach_RoleActions), new Action<RoleAction>(this.detach_RoleActions));
			this._BusinessApplication = default(EntityRef<BusinessApplication>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessApplicationID", DbType="Int NOT NULL")]
		public int BusinessApplicationID
		{
			get
			{
				return this._BusinessApplicationID;
			}
			set
			{
				if ((this._BusinessApplicationID != value))
				{
					if (this._BusinessApplication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessApplicationID = value;
					this.SendPropertyChanged("BusinessApplicationID");
					this.OnBusinessApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleMember", Storage="_RoleMembers", ThisKey="ID", OtherKey="RoleID")]
		public EntitySet<RoleMember> RoleMembers
		{
			get
			{
				return this._RoleMembers;
			}
			set
			{
				this._RoleMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleAction", Storage="_RoleActions", ThisKey="ID", OtherKey="RoleID")]
		public EntitySet<RoleAction> RoleActions
		{
			get
			{
				return this._RoleActions;
			}
			set
			{
				this._RoleActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessApplication_Role", Storage="_BusinessApplication", ThisKey="BusinessApplicationID", OtherKey="ID", IsForeignKey=true)]
		public BusinessApplication BusinessApplication
		{
			get
			{
				return this._BusinessApplication.Entity;
			}
			set
			{
				BusinessApplication previousValue = this._BusinessApplication.Entity;
				if (((previousValue != value) 
							|| (this._BusinessApplication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessApplication.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._BusinessApplication.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._BusinessApplicationID = value.ID;
					}
					else
					{
						this._BusinessApplicationID = default(int);
					}
					this.SendPropertyChanged("BusinessApplication");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoleMembers(RoleMember entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RoleMembers(RoleMember entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_RoleActions(RoleAction entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RoleActions(RoleAction entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="uac.RoleMembers")]
	public partial class RoleMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RoleID;
		
		private System.Nullable<int> _ActiveDirectoryObjectType;
		
		private System.Nullable<System.Guid> _ActiveDirectoryGuid;
		
		private string _GroupName;
		
		private string _UserName;
		
		private string _DomainControllerName;
		
		private System.Nullable<int> _PersonnelID;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnActiveDirectoryObjectTypeChanging(System.Nullable<int> value);
    partial void OnActiveDirectoryObjectTypeChanged();
    partial void OnActiveDirectoryGuidChanging(System.Nullable<System.Guid> value);
    partial void OnActiveDirectoryGuidChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDomainControllerNameChanging(string value);
    partial void OnDomainControllerNameChanged();
    partial void OnPersonnelIDChanging(System.Nullable<int> value);
    partial void OnPersonnelIDChanged();
    #endregion
		
		public RoleMember()
		{
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveDirectoryObjectType", DbType="Int")]
		public System.Nullable<int> ActiveDirectoryObjectType
		{
			get
			{
				return this._ActiveDirectoryObjectType;
			}
			set
			{
				if ((this._ActiveDirectoryObjectType != value))
				{
					this.OnActiveDirectoryObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._ActiveDirectoryObjectType = value;
					this.SendPropertyChanged("ActiveDirectoryObjectType");
					this.OnActiveDirectoryObjectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveDirectoryGuid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ActiveDirectoryGuid
		{
			get
			{
				return this._ActiveDirectoryGuid;
			}
			set
			{
				if ((this._ActiveDirectoryGuid != value))
				{
					this.OnActiveDirectoryGuidChanging(value);
					this.SendPropertyChanging();
					this._ActiveDirectoryGuid = value;
					this.SendPropertyChanged("ActiveDirectoryGuid");
					this.OnActiveDirectoryGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainControllerName", DbType="NVarChar(50)")]
		public string DomainControllerName
		{
			get
			{
				return this._DomainControllerName;
			}
			set
			{
				if ((this._DomainControllerName != value))
				{
					this.OnDomainControllerNameChanging(value);
					this.SendPropertyChanging();
					this._DomainControllerName = value;
					this.SendPropertyChanged("DomainControllerName");
					this.OnDomainControllerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelID", DbType="Int")]
		public System.Nullable<int> PersonnelID
		{
			get
			{
				return this._PersonnelID;
			}
			set
			{
				if ((this._PersonnelID != value))
				{
					this.OnPersonnelIDChanging(value);
					this.SendPropertyChanging();
					this._PersonnelID = value;
					this.SendPropertyChanged("PersonnelID");
					this.OnPersonnelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleMember", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RoleMembers.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RoleMembers.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="uac.RoleActions")]
	public partial class RoleAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ActionID;
		
		private int _RoleID;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<Action> _Action;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActionIDChanging(int value);
    partial void OnActionIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    #endregion
		
		public RoleAction()
		{
			this._Role = default(EntityRef<Role>);
			this._Action = default(EntityRef<Action>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", DbType="Int NOT NULL")]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleAction", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RoleActions.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RoleActions.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_RoleAction", Storage="_Action", ThisKey="ActionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				Action previousValue = this._Action.Entity;
				if (((previousValue != value) 
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.RoleActions.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.RoleActions.Add(this);
						this._ActionID = value.ID;
					}
					else
					{
						this._ActionID = default(int);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="uac.[Log]")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _UserName;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Name;
		
		private System.Nullable<int> _DeletedID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDeletedIDChanging(System.Nullable<int> value);
    partial void OnDeletedIDChanged();
    #endregion
		
		public Log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedID", DbType="Int")]
		public System.Nullable<int> DeletedID
		{
			get
			{
				return this._DeletedID;
			}
			set
			{
				if ((this._DeletedID != value))
				{
					this.OnDeletedIDChanging(value);
					this.SendPropertyChanging();
					this._DeletedID = value;
					this.SendPropertyChanged("DeletedID");
					this.OnDeletedIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="uac.ApplicationForms")]
	public partial class ApplicationForm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Key;
		
		private System.Nullable<int> _BusinessApplicationID;
		
		private EntitySet<Action> _Actions;
		
		private EntitySet<ActionControlPropertyValue> _ActionControlPropertyValues;
		
		private EntityRef<BusinessApplication> _BusinessApplication;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnBusinessApplicationIDChanging(System.Nullable<int> value);
    partial void OnBusinessApplicationIDChanged();
    #endregion
		
		public ApplicationForm()
		{
			this._Actions = new EntitySet<Action>(new Action<Action>(this.attach_Actions), new Action<Action>(this.detach_Actions));
			this._ActionControlPropertyValues = new EntitySet<ActionControlPropertyValue>(new Action<ActionControlPropertyValue>(this.attach_ActionControlPropertyValues), new Action<ActionControlPropertyValue>(this.detach_ActionControlPropertyValues));
			this._BusinessApplication = default(EntityRef<BusinessApplication>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessApplicationID", DbType="Int")]
		public System.Nullable<int> BusinessApplicationID
		{
			get
			{
				return this._BusinessApplicationID;
			}
			set
			{
				if ((this._BusinessApplicationID != value))
				{
					if (this._BusinessApplication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessApplicationID = value;
					this.SendPropertyChanged("BusinessApplicationID");
					this.OnBusinessApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationForm_Action", Storage="_Actions", ThisKey="ID", OtherKey="ApplicationFormID")]
		public EntitySet<Action> Actions
		{
			get
			{
				return this._Actions;
			}
			set
			{
				this._Actions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationForm_ActionControlPropertyValue", Storage="_ActionControlPropertyValues", ThisKey="ID", OtherKey="ApplicationFormID")]
		public EntitySet<ActionControlPropertyValue> ActionControlPropertyValues
		{
			get
			{
				return this._ActionControlPropertyValues;
			}
			set
			{
				this._ActionControlPropertyValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessApplication_ApplicationForm", Storage="_BusinessApplication", ThisKey="BusinessApplicationID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public BusinessApplication BusinessApplication
		{
			get
			{
				return this._BusinessApplication.Entity;
			}
			set
			{
				BusinessApplication previousValue = this._BusinessApplication.Entity;
				if (((previousValue != value) 
							|| (this._BusinessApplication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessApplication.Entity = null;
						previousValue.ApplicationForms.Remove(this);
					}
					this._BusinessApplication.Entity = value;
					if ((value != null))
					{
						value.ApplicationForms.Add(this);
						this._BusinessApplicationID = value.ID;
					}
					else
					{
						this._BusinessApplicationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BusinessApplication");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Actions(Action entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationForm = this;
		}
		
		private void detach_Actions(Action entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationForm = null;
		}
		
		private void attach_ActionControlPropertyValues(ActionControlPropertyValue entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationForm = this;
		}
		
		private void detach_ActionControlPropertyValues(ActionControlPropertyValue entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationForm = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="uac.Actions")]
	public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Key;
		
		private int _ApplicationFormID;
		
		private EntitySet<RoleAction> _RoleActions;
		
		private EntitySet<ActionControlPropertyValue> _ActionControlPropertyValues;
		
		private EntityRef<ApplicationForm> _ApplicationForm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnApplicationFormIDChanging(int value);
    partial void OnApplicationFormIDChanged();
    #endregion
		
		public Action()
		{
			this._RoleActions = new EntitySet<RoleAction>(new Action<RoleAction>(this.attach_RoleActions), new Action<RoleAction>(this.detach_RoleActions));
			this._ActionControlPropertyValues = new EntitySet<ActionControlPropertyValue>(new Action<ActionControlPropertyValue>(this.attach_ActionControlPropertyValues), new Action<ActionControlPropertyValue>(this.detach_ActionControlPropertyValues));
			this._ApplicationForm = default(EntityRef<ApplicationForm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationFormID", DbType="Int NOT NULL")]
		public int ApplicationFormID
		{
			get
			{
				return this._ApplicationFormID;
			}
			set
			{
				if ((this._ApplicationFormID != value))
				{
					if (this._ApplicationForm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationFormIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationFormID = value;
					this.SendPropertyChanged("ApplicationFormID");
					this.OnApplicationFormIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_RoleAction", Storage="_RoleActions", ThisKey="ID", OtherKey="ActionID")]
		public EntitySet<RoleAction> RoleActions
		{
			get
			{
				return this._RoleActions;
			}
			set
			{
				this._RoleActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_ActionControlPropertyValue", Storage="_ActionControlPropertyValues", ThisKey="ID", OtherKey="ActionID")]
		public EntitySet<ActionControlPropertyValue> ActionControlPropertyValues
		{
			get
			{
				return this._ActionControlPropertyValues;
			}
			set
			{
				this._ActionControlPropertyValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationForm_Action", Storage="_ApplicationForm", ThisKey="ApplicationFormID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ApplicationForm ApplicationForm
		{
			get
			{
				return this._ApplicationForm.Entity;
			}
			set
			{
				ApplicationForm previousValue = this._ApplicationForm.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationForm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationForm.Entity = null;
						previousValue.Actions.Remove(this);
					}
					this._ApplicationForm.Entity = value;
					if ((value != null))
					{
						value.Actions.Add(this);
						this._ApplicationFormID = value.ID;
					}
					else
					{
						this._ApplicationFormID = default(int);
					}
					this.SendPropertyChanged("ApplicationForm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoleActions(RoleAction entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}
		
		private void detach_RoleActions(RoleAction entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}
		
		private void attach_ActionControlPropertyValues(ActionControlPropertyValue entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}
		
		private void detach_ActionControlPropertyValues(ActionControlPropertyValue entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="uac.ActionControlPropertyValues")]
	public partial class ActionControlPropertyValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ActionID;
		
		private System.Nullable<int> _ApplicationFormID;
		
		private string _ControlName;
		
		private System.Nullable<int> _ControlIndex;
		
		private string _PropertyName;
		
		private bool _PropertyValue;
		
		private System.Nullable<bool> _IsDefault;
		
		private EntityRef<Action> _Action;
		
		private EntityRef<ApplicationForm> _ApplicationForm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActionIDChanging(System.Nullable<int> value);
    partial void OnActionIDChanged();
    partial void OnApplicationFormIDChanging(System.Nullable<int> value);
    partial void OnApplicationFormIDChanged();
    partial void OnControlNameChanging(string value);
    partial void OnControlNameChanged();
    partial void OnControlIndexChanging(System.Nullable<int> value);
    partial void OnControlIndexChanged();
    partial void OnPropertyNameChanging(string value);
    partial void OnPropertyNameChanged();
    partial void OnPropertyValueChanging(bool value);
    partial void OnPropertyValueChanged();
    partial void OnIsDefaultChanging(System.Nullable<bool> value);
    partial void OnIsDefaultChanged();
    #endregion
		
		public ActionControlPropertyValue()
		{
			this._Action = default(EntityRef<Action>);
			this._ApplicationForm = default(EntityRef<ApplicationForm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", DbType="Int")]
		public System.Nullable<int> ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationFormID", DbType="Int")]
		public System.Nullable<int> ApplicationFormID
		{
			get
			{
				return this._ApplicationFormID;
			}
			set
			{
				if ((this._ApplicationFormID != value))
				{
					if (this._ApplicationForm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationFormIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationFormID = value;
					this.SendPropertyChanged("ApplicationFormID");
					this.OnApplicationFormIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ControlName
		{
			get
			{
				return this._ControlName;
			}
			set
			{
				if ((this._ControlName != value))
				{
					this.OnControlNameChanging(value);
					this.SendPropertyChanging();
					this._ControlName = value;
					this.SendPropertyChanged("ControlName");
					this.OnControlNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlIndex", DbType="Int")]
		public System.Nullable<int> ControlIndex
		{
			get
			{
				return this._ControlIndex;
			}
			set
			{
				if ((this._ControlIndex != value))
				{
					this.OnControlIndexChanging(value);
					this.SendPropertyChanging();
					this._ControlIndex = value;
					this.SendPropertyChanged("ControlIndex");
					this.OnControlIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PropertyName
		{
			get
			{
				return this._PropertyName;
			}
			set
			{
				if ((this._PropertyName != value))
				{
					this.OnPropertyNameChanging(value);
					this.SendPropertyChanging();
					this._PropertyName = value;
					this.SendPropertyChanged("PropertyName");
					this.OnPropertyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyValue", DbType="Bit NOT NULL")]
		public bool PropertyValue
		{
			get
			{
				return this._PropertyValue;
			}
			set
			{
				if ((this._PropertyValue != value))
				{
					this.OnPropertyValueChanging(value);
					this.SendPropertyChanging();
					this._PropertyValue = value;
					this.SendPropertyChanged("PropertyValue");
					this.OnPropertyValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDefault", DbType="Bit")]
		public System.Nullable<bool> IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_ActionControlPropertyValue", Storage="_Action", ThisKey="ActionID", OtherKey="ID", IsForeignKey=true)]
		public Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				Action previousValue = this._Action.Entity;
				if (((previousValue != value) 
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.ActionControlPropertyValues.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.ActionControlPropertyValues.Add(this);
						this._ActionID = value.ID;
					}
					else
					{
						this._ActionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationForm_ActionControlPropertyValue", Storage="_ApplicationForm", ThisKey="ApplicationFormID", OtherKey="ID", IsForeignKey=true)]
		public ApplicationForm ApplicationForm
		{
			get
			{
				return this._ApplicationForm.Entity;
			}
			set
			{
				ApplicationForm previousValue = this._ApplicationForm.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationForm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationForm.Entity = null;
						previousValue.ActionControlPropertyValues.Remove(this);
					}
					this._ApplicationForm.Entity = value;
					if ((value != null))
					{
						value.ActionControlPropertyValues.Add(this);
						this._ApplicationFormID = value.ID;
					}
					else
					{
						this._ApplicationFormID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ApplicationForm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="inv.FiscalYears")]
	public partial class FiscalYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<int> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public FiscalYear()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="uac.BusinessApplications")]
	public partial class BusinessApplication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _InstallationPath;
		
		private System.Data.Linq.Binary _Icon;
		
		private string _Title;
		
		private System.Nullable<bool> _IsWebbase;
		
		private EntitySet<Role> _Roles;
		
		private EntitySet<ApplicationForm> _ApplicationForms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInstallationPathChanging(string value);
    partial void OnInstallationPathChanged();
    partial void OnIconChanging(System.Data.Linq.Binary value);
    partial void OnIconChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsWebbaseChanging(System.Nullable<bool> value);
    partial void OnIsWebbaseChanged();
    #endregion
		
		public BusinessApplication()
		{
			this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
			this._ApplicationForms = new EntitySet<ApplicationForm>(new Action<ApplicationForm>(this.attach_ApplicationForms), new Action<ApplicationForm>(this.detach_ApplicationForms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstallationPath", DbType="NVarChar(1024)")]
		public string InstallationPath
		{
			get
			{
				return this._InstallationPath;
			}
			set
			{
				if ((this._InstallationPath != value))
				{
					this.OnInstallationPathChanging(value);
					this.SendPropertyChanging();
					this._InstallationPath = value;
					this.SendPropertyChanged("InstallationPath");
					this.OnInstallationPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(256)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsWebbase", DbType="Bit")]
		public System.Nullable<bool> IsWebbase
		{
			get
			{
				return this._IsWebbase;
			}
			set
			{
				if ((this._IsWebbase != value))
				{
					this.OnIsWebbaseChanging(value);
					this.SendPropertyChanging();
					this._IsWebbase = value;
					this.SendPropertyChanged("IsWebbase");
					this.OnIsWebbaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessApplication_Role", Storage="_Roles", ThisKey="ID", OtherKey="BusinessApplicationID")]
		public EntitySet<Role> Roles
		{
			get
			{
				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessApplication_ApplicationForm", Storage="_ApplicationForms", ThisKey="ID", OtherKey="BusinessApplicationID")]
		public EntitySet<ApplicationForm> ApplicationForms
		{
			get
			{
				return this._ApplicationForms;
			}
			set
			{
				this._ApplicationForms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.BusinessApplication = this;
		}
		
		private void detach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.BusinessApplication = null;
		}
		
		private void attach_ApplicationForms(ApplicationForm entity)
		{
			this.SendPropertyChanging();
			entity.BusinessApplication = this;
		}
		
		private void detach_ApplicationForms(ApplicationForm entity)
		{
			this.SendPropertyChanging();
			entity.BusinessApplication = null;
		}
	}
	
	public partial class GetAllApproachabilityApplicationsResult
	{
		
		private int _ID;
		
		private string _Name;
		
		private string _InstallationPath;
		
		private System.Data.Linq.Binary _Icon;
		
		private string _Title;
		
		public GetAllApproachabilityApplicationsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstallationPath", DbType="NVarChar(1024)")]
		public string InstallationPath
		{
			get
			{
				return this._InstallationPath;
			}
			set
			{
				if ((this._InstallationPath != value))
				{
					this._InstallationPath = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon", DbType="Image")]
		public System.Data.Linq.Binary Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this._Icon = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(256)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
